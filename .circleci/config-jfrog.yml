orbs:
  slack: circleci/slack@3.4.2


# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1


commands:
  jfrog-cmd:
    steps:
      # Install JFrog CLI
      - curl -fL https://getcli.jfrog.io | sh
      # Configure Artifactory instance with JFrog CLI
      - ./jfrog config add artifactory --artifactory-url $ARTIFACTORY_URL --user $ARTIFACTORY_USERNAME --password $ARTIFACTORY_PASSWORD --interactive=false
      # Set the M2_HOME environment variable
      - export M2_HOME=/usr/share/maven
      # Replace the repository name in the configuration.yml to the correct one.
      - sed -i 's,MAVEN_SNAPSHOT_REPO_KEY,'"$MAVEN_SNAPSHOT_REPO_KEY"',g' configuration.yml
      - sed -i 's,MAVEN_RELEASE_REPO_KEY,'"$MAVEN_RELEASE_REPO_KEY"',g' configuration.yml


slack-alert: &slack-alert
  fail_only: false
  failure_message: ':red_circle: ${CIRCLE_BRANCH}@${CIRCLE_JOB} job has failed!'
  include_job_number_field: true
  include_project_field: true
  include_visit_job_action: true
  success_message: ':tada: ${CIRCLE_BRANCH}@${CIRCLE_JOB} job has succeeded!'

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
      - image: circleci/postgres:12.4
          environment:
            POSTGRES_DB: account
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: postgres

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      #      - run:
      #          name: settings
      #          command: mvn -s .circleci/.circleci.settings.xml -DskipTests package

      #      - jfrog-cmd
      # Use mvn clean and package as the standard maven build phase
      #      - run:
      #          name: Build
      #          command: mvn -B -DskipTests clean package
      # Then run your tests!
      - run:
          name: Test
          command: mvn -s .circleci/.circleci.settings.xml test


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
